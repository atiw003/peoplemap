%h1
  %img{:src=>@current_node_icon, :alt=>"Person icon", :width=>"56",:height=>"46"}
  welcome to <b>people</b>map
%h2
  Getting Started
%p
  You can search for data in the system using the search form below, or create a new record using the links available.
%h2
  Search or Add a New Record
- form_tag :action => 'index', :controller=> "search", :id=>"top_menu_search" do
  %input{:name=>"search"}
  %input{:type=>"submit"}
%p
  = link_to image_tag("/images/icons/male.png",:alt=>"New Person"), new_person_path
  = link_to image_tag("/images/icons/organisation.png",:alt=>"Add a New Organisation"), new_organisation_path
  = link_to image_tag("/images/icons/location.png",:alt=>"Add a New Location"), new_location_path
  = link_to image_tag("/images/icons/event.png",:alt=>"Add a New Event"), new_event_path
  = link_to image_tag("/images/icons/note.png",:alt=>"Add a New Reference"), new_reference_path
%h2
  About <b>people</b>map
%p
  <b>people</b>map is an application designed to support the collection of information about the relationships between people.
  It is designed to support collaborative analysis of information using a network-centric data model, by explicitly capturing information about relationships
  and displaying them in a visual manner for easy comprehension & insight.
%p
  The relationships defined in this application have been set up to show the types of things that are possible - however, they are extremely simple to define for specific
  business domains, and the effort required to define a comprehensive set of relationships is minimal as they are all maintained in a single master XML file.
  The master XML file can easily be edited using a simple text editor, or maintained as a spreadsheet (Excel, etc) and exported to XML.
  The master Excel spreadsheet used to define relationship types for this instance are available with the full source code on GitHub at <a href="http://github.com/sashaagafonoff/peoplemap">http://github.com/sashaagafonoff/peoplemap</a>
%p
  Implemented in Ruby on Rails, the underlying data model is extremely simple to modify, both for entity types as well as relationship properties.
  Changes to the underlying data model are very simple to implement, as the MVC architecture used by the application lends itself readily to model changes.
